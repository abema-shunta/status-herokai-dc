%nav{:class => "navbar navbar-inverse navbar-fixed-top"}
  %a.navbar-brand{:href => "#"} Status HerokaiJP DevCenter
  .navbar-form.pull-right
    .form-group
      %input#filter{:type => "text", :class => "form-control", :placeholder => "Search"}

.jumbotron
  .container
    %h1 Status HerokaiJP Devcenter
    :ruby 
      pages = @articles.size
      translated_pages = @articles.select{|a| a[:translated_at] != nil}.size
      out_of_date_pages = @articles.select{|a| (a[:translated_at] != nil) && (a[:translated_at] < a[:written_at])}.size
      ood_rate = out_of_date_pages * 100 / pages
      score = translated_pages * 100 / pages 
    %p
      = status_lead(pages, translated_pages)
    .progress.progress-striped
      #bar_success.progress-bar.progress-bar-success{:style => "width: #{score - ood_rate}%"}
        %span.sr-only #{score - ood_rate}% Complete
      #bar_warning.progress-bar.progress-bar-warning{:style => "width: #{ood_rate}%"}
        %span.sr-only #{ood_rate}% Complete
      #bar_danger.progress-bar.progress-bar-danger{:style => "width: #{100 - score}%"}
        %span.sr-only #{100 - score}% Complete

%table#data.table.table-striped
  %thead
    %tr
      %th{:style => "display:none"}
      %th 
      %th= t "thead.name"
      %th= t "thead.updated"
      %th= t "thead.translated"
      %th
      %th
      %th
      %th
  %tbody
    - words = {"success" => "OK", "warning" => "Out-of-date", "danger" => "Untranslated" }
    - sign = {"success" => "ok", "warning" => "warning-sign", "danger" => "minus-sign"}
    - @articles.each do |article|
      :ruby
        updated_at = Date.parse(article[:written_at].to_s)
        translated_at = Date.parse(article[:translated_at].to_s) if article[:translated_at]
        if translated_at
        if updated_at < translated_at
        s = "success"
        else
        s = "warning"
        end
        else
        s = "danger"
        end
      %tr{:class => [s,"data"], :id => article[:name]}
        %td{:style => "display: none"}= article[:name]
        %td
          %span{:class => "glyphicon glyphicon-#{sign[s]} text-#{s} stat-#{s}"}
        %td{:class => "article_name"}
          = link_to article[:name], "https://devcenter.heroku.com/articles/#{article[:url]}", :class => "text-info"
          %span.text-muted
            (#{article["url"]})
          - if article[:translated_at]
            = link_to t("c.japanese"), "https://github.com/herokaijp/devcenter/wiki/#{article[:url]}", :class => ["btn", "btn-default", "btn-xs"]
        %td= article[:written_at].strftime "%y/%m/%d" if article[:written_at]
        %td
          - unless article[:translated_at]
            %span.text-muted= t "c.not_yet"  
          - else        
            =article[:translated_at].strftime "%y/%m/%d"
        %td= link_to "", compare_path(:url => article[:url]), :class => ["glyphicon", "glyphicon-eye-open", "compare"], :remote => true
        %td= link_to "", "https://github.com/herokaijp/devcenter/wiki/#{article[:url]}", :class => ["glyphicon", "glyphicon-pencil", "wikilink"]
        %td= link_to "", "https://devcenter.heroku.com/articles/#{article[:url]}", :class => ["glyphicon", "glyphicon-new-window", "doclink"]
        %td= link_to "", "https://twitter.com/share?text=#{tweet_text(article)}", :class => ["glyphicon", "glyphicon-bullhorn", "announce"], :target => "_blank"

#Modal.modal.fade{:tabindex => "-1", :role => "dialog", "aria-labellebdy" => "myModalLabel", "aria-hidden" => "true"}
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{"data-dismiss" => "modal", "aria-hidden" => "true"} &times; 
        %h4.modal-title
      .modal-body
        %table#Articles
          %tr
            %td#doc
            %td#wiki

:javascript

  var state_filter = ""
  var state_list = ["",".success",".warning",".danger"];
  
  $('.wikilink').tooltip({
    title: "#{t 'tooltip.wikilink'}",
    trigger: "hover"
  });
  $('.doclink').tooltip({
    title: "#{t 'tooltip.doclink'}",
    trigger: "hover"
  });
  $('.announce').tooltip({
    title: "#{t 'tooltip.announce'}",
    trigger: "hover"
  });
  $('.stat-success').tooltip({
    title: "#{t 'tooltip.stat_success'}",
    trigger: "hover"
  });
  $('.stat-warning').tooltip({
    title: "#{t 'tooltip.stat_warning'}",
    trigger: "hover"
  });
  $('.stat-danger').tooltip({
    title: "#{t 'tooltip.stat_danger'}",
    trigger: "hover"
  });
  $('.compare').tooltip({
    title: "#{t 'tooltip.compare'}",
    trigger: "hover"
  });
  $('#bar_success').tooltip({
    title: "#{t 'tooltip.stat_success'} (#{score - ood_rate}%)",
    trigger: "hover",
    placement: "bottom"
  });
  $('#bar_warning').tooltip({
    title: "#{t 'tooltip.stat_warning'} (#{ood_rate}%)",
    trigger: "hover",
    placement: "bottom"
  });
  $('#bar_danger').tooltip({
    title: "#{t 'tooltip.stat_danger'} (#{100 - score}%)",
    trigger: "hover",
    placement: "bottom"
  });

  function invoke_state_filter(num){
    if(state_filter == state_list[num]) {
      state_filter = state_list[0];
    } else {
      state_filter = state_list[num];
    }
    change_bar_state();
    $("#filter").keyup();
  }
  
  function change_bar_state(){
    if(state_filter == state_list[0]) {
      $(".progress-bar").show();
    } else {
      $(".progress-bar").hide()
      $(".progress-bar-"+state_filter.substring(1)).show();
    }
  }

  $('#bar_success').click( function(){ invoke_state_filter(1) });
  $('#bar_warning').click( function(){ invoke_state_filter(2) });
  $('#bar_danger').click(  function(){ invoke_state_filter(3) });

  $('.compare').click(function(){
    $("#Modal h4").html($(this).parent().parent().find("td.article_name").html());
    $("#doc").html("<img src='#{image_path("ajax-loader.gif")}' class='indicator' /><span class='text-muted center'>#{t 'c.original_article'}</span>");
    $("#wiki").html("<img src='#{image_path("ajax-loader.gif")}' class='indicator' /><span class='text-muted center'>#{t 'c.translated_article'}</span>");
    $('#Modal').modal('show');
  });
  
  function apply_filter(keyword){
    if(keyword.length > 0){
      $("table#data tr.data").hide();
      $("table#data tr.data"+state_filter).each(function(){
        if($(this).attr("id").toLowerCase().indexOf(keyword.toLowerCase()) != -1){
          $(this).show();
        } else {
          $(this).hide();
        }
      });
    }else{
      $("table#data tr.data").hide();
      $("table#data tr.data"+state_filter).show();
    }
  }
  
  $("#filter").on("keyup",function(){
    console.log($(this).val());
    var keyword = $(this).val();
    apply_filter(keyword);
  })